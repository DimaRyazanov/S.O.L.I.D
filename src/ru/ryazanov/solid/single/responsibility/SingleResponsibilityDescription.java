package ru.ryazanov.solid.single.responsibility;

import ru.ryazanov.solid.Description;

public class SingleResponsibilityDescription implements Description {
    @Override
    public String principles() {
        String result = "";

        result += "Пример №1\n";

        result += "Класс Animal описывающее какое-то животное.\n" +
                "Он решает две задачи: 1) Манипулирует свойствами объекта в конструкторе и методе getName. " +
                "2) Работает с хранилишем данных в методе save.\n" +
                "В соответствии с принципом единой ответственности класс должен решать лишь какую-то одну задачу," +
                "а он же решает 2.\nПочему это плохо? Если изменится способ (порядок) работы с хранилищем данных (изменится бд и т.п.)," +
                "то придется вносить измениния во все классы работающих с хранилищем.\n" +
                "Такая архитектура не отличается гибкостью, измение одной подсистемы, затрагивает другие.\n";
        result += "Для решения данной проблемы создадим еще один класс AnimalRepository, задачей которого будет работа только" +
                "с хранилишем, в частности сохрание/получение объекта класса Animal (методы get, save).\n";

        return result;
    }
}
